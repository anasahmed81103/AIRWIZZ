@{
    ViewData["Title"] = "Real-Time Flight Map";
}

<h2>Real-Time Flight Map</h2>

<!-- Map container -->
<div id="map" style="height: 600px; width: 100%; margin: auto; border: 2px solid #ccc; border-radius: 10px;"></div>

<!-- Optional Debugging area -->
<div id="debug" style="margin-top: 20px; display: none; color: red;"></div>

<!-- Include Leaflet.js and its CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

<script>
    // Initialize the map
    var map = L.map('map').setView([20.0, 0.0], 2); // World map as default view

    // Add OpenStreetMap tile layer
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);

    // Array to hold markers (for clearing and updating)
    var markers = [];

    // Function to fetch and display flights
    async function fetchAndDisplayFlights() {
        try {
            const response = await fetch('/FlightTracking/GetFlightsData'); // Make sure this URL is correct
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const flightData = await response.json();

            // Debugging: Log the flight data to console to verify its structure
            console.log(flightData);

            // Clear existing markers
            markers.forEach(marker => map.removeLayer(marker));
            markers = [];

            // Ensure flightData and flightData.data exist
            if (flightData && flightData.data) {
                // Iterate over each flight and create a marker
                flightData.data.forEach(flight => {
                    const latitude = flight.latitude;
                    const longitude = flight.longitude;
                    const flightNumber = flight.flight.iata; // Get flight number (IATA code)

                    // Check if latitude and longitude are valid before creating a marker
                    if (latitude && longitude) {
                        // Create a new marker for this flight at the given latitude and longitude
                        const marker = L.marker([latitude, longitude])
                            .addTo(map)
                            .bindPopup(
                                `<strong>Flight: ${flightNumber}</strong><br>
                                 Coordinates: ${latitude}, ${longitude}`
                            );

                        // Optionally, save marker to markers array for future removal/updating
                        markers.push(marker);
                    }
                });
            } else {
                console.error('No flight data found!');
                document.getElementById('debug').innerText = 'No flight data found!';
            }
        } catch (error) {
            console.error('Error fetching flight data:', error);
            document.getElementById('debug').innerText = error.message;
        }
    }



    // Initial fetch
    fetchAndDisplayFlights();

    // Auto-refresh every 15 seconds
    setInterval(fetchAndDisplayFlights, 15000);
</script>
